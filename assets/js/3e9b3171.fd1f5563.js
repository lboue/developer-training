"use strict";(self.webpackChunkgolioth_developer_training=self.webpackChunkgolioth_developer_training||[]).push([[978],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(7462),r=n(7294),i=n(6010),o=n(2389),l=n(7392),s=n(7094),p=n(2466);const d="tabList__CuJ",m="tabItem_LNqP";function u(e){var t;const{lazy:n,block:o,defaultValue:u,values:c,groupId:h,className:k}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=c??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,l.l)(y,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===u?u:u??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,s.U)(),[w,_]=(0,r.useState)(g),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=v[h];null!=e&&e!==w&&y.some((t=>t.value===e))&&_(e)}const E=e=>{const t=e.currentTarget,n=T.indexOf(t),a=y[n].value;a!==w&&(x(t),_(a),null!=h&&N(h,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},k)},y.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>T.push(e),onKeyDown:O,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",m,null==o?void 0:o.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function c(e){const t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},873:(e,t,n)=>{n.d(t,{ZP:()=>s});var a=n(7462),r=(n(7294),n(3905)),i=n(5488),o=n(5162);const l={toc:[]};function s(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use the USB cable to plug the MagTag into your local computer. Ensure the\npower switch is in the 'On' position.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Put the MagTag into DFU bootloader mode"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Hold down the Boot0 button")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Press and release the Reset button"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{alt:"MagTag Boot0 and Reset buttons",src:n(8606).Z,width:"1000",height:"643"})))))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the flash command on your local machine:"),(0,r.kt)(i.Z,{groupId:"os",defaultValue:"linux",values:[{label:"Linux/MacOS",value:"linux"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"linux",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd ~/Downloads\nesptool.py --chip esp32s2 --port /dev/ttyACM0 write_flash 0x0 merged_yymmdd_hhmmss.bin\n"))),(0,r.kt)(o.Z,{value:"windows",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd %HOMEPATH%/Downloads\npython -m esptool --chip esp32s2 --port com3 write_flash 0x0 merged_yymmdd_hhmmss.bin\n")),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The port for your MagTag may be different from the ",(0,r.kt)("inlineCode",{parentName:"p"},"com3")," shown above.\nFind this value in the Device Manager. Here's ",(0,r.kt)("a",{parentName:"p",href:"https://www.loom.com/share/cde8204ea8b341d892f6ad21ed43ac82"},"a video walkthrough of the\nprocess"),"."))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Press the MagTag ",(0,r.kt)("strong",{parentName:"p"},"Reset")," button to start the new firmware"))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If the flash is successful, ",(0,r.kt)("strong",{parentName:"p"},"you will receive an error message")," telling you that you must manually reset the device. Remember to press the reset button to run the newly flashed program. ",(0,r.kt)("a",{parentName:"p",href:"/docs/zephyr-intro/zephyr-tips#you-must-press-the-reset-button-after-flashing-firmware"},"Learn more about this"),"."),(0,r.kt)("p",{parentName:"admonition"},"On some machines you will only have a few seconds to run the ",(0,r.kt)("inlineCode",{parentName:"p"},"esptool.py")," command after entering bootloader mode. ",(0,r.kt)("a",{parentName:"p",href:"/docs/zephyr-intro/zephyr-tips#errors-with-west-build-zephyr-tree-and-esp32-environmental-variables"},"Learn more about this"),".")))}s.isMDXComponent=!0},1018:(e,t,n)=>{n.d(t,{ZP:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(5488),o=n(5162),l=n(873);const s={toc:[]};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Put the MagTag into DFU bootloader mode (Hold Boot0, tap Reset)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Change to the download directory and run the flash command on your local machine:"),(0,r.kt)(i.Z,{groupId:"os",defaultValue:"linux",values:[{label:"Linux/MacOS",value:"linux"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"linux",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd ~/Downloads\nesptool.py --chip esp32s2 --port /dev/ttyACM0 write_flash 0x0 merged_yymmdd_hhmmss.bin\n"))),(0,r.kt)(o.Z,{value:"windows",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd %HOMEPATH%/Downloads\npython -m esptool --chip esp32s2 --port com3 write_flash 0x0 merged_yymmdd_hhmmss.bin\n"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Press the MagTag ",(0,r.kt)("strong",{parentName:"p"},"Reset")," button to start the new firmware"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click to reveal full firmware update instructions"),(0,r.kt)(l.ZP,{mdxType:"VerbostDownloadFlash"})))}p.isMDXComponent=!0},2434:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=(n(5488),n(5162),n(1018));const o={sidebar_position:5,description:"Zephyr can blink with timers or threads!"},l="Try the RTOS",s={unversionedId:"basic-io-exercises/use-rtos",id:"basic-io-exercises/use-rtos",title:"Try the RTOS",description:"Zephyr can blink with timers or threads!",source:"@site/docs/basic-io-exercises/use-rtos.md",sourceDirName:"basic-io-exercises",slug:"/basic-io-exercises/use-rtos",permalink:"/docs/basic-io-exercises/use-rtos",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Zephyr can blink with timers or threads!"},sidebar:"tutorialSidebar",previous:{title:"Add Button Input",permalink:"/docs/basic-io-exercises/button-input"},next:{title:"Sensor Exercises",permalink:"/docs/category/sensor-exercises"}},p={},d=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Desired outcome(s)",id:"desired-outcomes",level:3},{value:"Time Estimate",id:"time-estimate",level:3},{value:"Workflow 1 - Timer",id:"workflow-1---timer",level:2},{value:"Use the blinky-training example",id:"use-the-blinky-training-example",level:3},{value:"Blinking with a timer",id:"blinking-with-a-timer",level:3},{value:"Build and flash the Timers example",id:"build-and-flash-the-timers-example",level:3},{value:"Expected outcome",id:"expected-outcome",level:3},{value:"Workflow 2 - Thread",id:"workflow-2---thread",level:2},{value:"Add a thread",id:"add-a-thread",level:3},{value:"Build and flash the Threads example",id:"build-and-flash-the-threads-example",level:3},{value:"Expected outcome",id:"expected-outcome-1",level:3}],m={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"try-the-rtos"},"Try the RTOS"),(0,r.kt)("h2",{id:"learning-objectives"},"Learning Objectives"),(0,r.kt)("p",null,"When you made the red LED blink, it was using a sleep function in the main loop. For actual embedded development this is almost never allowed, and timers are used instead. One benefit of using a Real Time Operating System (RTOS) like\nZephyr is that it will take care of scheduling for you. In this exercise you will use two different approaches to having the RTOS blink the red LED for you."),(0,r.kt)("h3",{id:"desired-outcomes"},"Desired outcome(s)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Understand how to Blink using a timer in the RTOS"),(0,r.kt)("li",{parentName:"ul"},"Understand how to Blink using a dedicated thread in the RTOS")),(0,r.kt)("h3",{id:"time-estimate"},"Time Estimate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"20 minutes")),(0,r.kt)("h2",{id:"workflow-1---timer"},"Workflow 1 - Timer"),(0,r.kt)("h3",{id:"use-the-blinky-training-example"},"Use the blinky-training example"),(0,r.kt)("p",null,"For this exercise we'll use the code we ended up with in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/basic-io-exercises/mapping-gpio"},"Blinking an\nLED")," exercise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd ~/Desktop/magtag-training/app\ncp -r blinky-training rtos-training\ncd rtos-training\n")),(0,r.kt)("p",null,"You shouldn't reuse the build directory from a different project. Let's remove\nit now to avoid build errors. It will be automatically regenerated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"rm -r build\n")),(0,r.kt)("p",null,"You should already have a ",(0,r.kt)("inlineCode",{parentName:"p"},"boards")," directory with the ",(0,r.kt)("inlineCode",{parentName:"p"},"esp32s2_saola.overlay"),"\nfile inside it that sets up ",(0,r.kt)("inlineCode",{parentName:"p"},"led0"),". We will not need to change anything in the\ndevicetree."),(0,r.kt)("h3",{id:"blinking-with-a-timer"},"Blinking with a timer"),(0,r.kt)("p",null,"Timers are easy to use in Zephyr. There are just three things we need to do:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Make a callback function that will run when the timer expires"),(0,r.kt)("li",{parentName:"ul"},"Define the timer"),(0,r.kt)("li",{parentName:"ul"},"Start the timer")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.c")," file:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new function just above ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," to act as the timer callback"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Function should be marked extern and return ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"Function parameter should be ",(0,r.kt)("inlineCode",{parentName:"li"},"struct k_timer *dummy")),(0,r.kt)("li",{parentName:"ul"},"Move the LED toggle function call out of the main loop and into your new\nfunction (you do not need the sleep function)"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Define your timer just after your new function (replace ",(0,r.kt)("inlineCode",{parentName:"p"},"my_timer_handler"),"\nwith the name of your function):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"```c\nK_TIMER_DEFINE(my_timer, my_timer_handler, NULL);\n```\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),", before the ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop begins, start your timer:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c"},"k_timer_start(&my_timer, K_SECONDS(1), K_SECONDS(1));\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click to reveal the expected main.c file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:"excerpts from main.c",excerpts:!0,from:!0,"main.c":!0},"void my_timer_handler(struct k_timer *dummy) {\n    gpio_pin_toggle_dt(&led);\n}\n\nK_TIMER_DEFINE(my_timer, my_timer_handler, NULL);\n\nvoid main(void)\n{\n    int ret;\n\n    if (!device_is_ready(led.port)) {\n        return;\n    }\n\n    ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);\n    if (ret < 0) {\n        return;\n    }\n\n    k_timer_start(&my_timer, K_SECONDS(1), K_SECONDS(1));\n\n    while (1) {\n        k_msleep(SLEEP_TIME_MS);\n    }\n}\n")),(0,r.kt)("p",null,"When starting the timer, there are two time values. The first is how long to\nwait before the first timer expiry. The second is the the wait before each\nsubsequent expiry. So you could wait ",(0,r.kt)("inlineCode",{parentName:"p"},"K_SECONDS(5)")," at the beginning, and then\nset the blink rate to ",(0,r.kt)("inlineCode",{parentName:"p"},"K_MSEC(500)"),". You can also do a one-shot timer by setting\nthe second value to ",(0,r.kt)("inlineCode",{parentName:"p"},"K_NO_WAIT"),".")),(0,r.kt)("h3",{id:"build-and-flash-the-timers-example"},"Build and flash the Timers example"),(0,r.kt)(i.ZP,{mdxType:"HowToFlash"}),(0,r.kt)("h3",{id:"expected-outcome"},"Expected outcome"),(0,r.kt)("p",null,"Make sure the LED blinks as expected, then play around with different timer\nvalues to see how they work."),(0,r.kt)("p",null,"For more information on Zephyr Timers, consult ",(0,r.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/timing/timers.html"},"the Timers\ndocumentation"),"."),(0,r.kt)("h2",{id:"workflow-2---thread"},"Workflow 2 - Thread"),(0,r.kt)("p",null,"You can also blink the LED by giving it its own thread. Once started, the\nscheduler will monitor the thread, servicing it when needed, and returing to\nother tasks in between blinks. To use a thread, there are just three things we\nneed to do:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Make a function that will run as its own thread"),(0,r.kt)("li",{parentName:"ul"},"Define the thread"),(0,r.kt)("li",{parentName:"ul"},"Start the thread")),(0,r.kt)("h3",{id:"add-a-thread"},"Add a thread"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/main.c")," file:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new function just above ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," to run as its own thread"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Function should return ",(0,r.kt)("inlineCode",{parentName:"li"},"extern void")),(0,r.kt)("li",{parentName:"ul"},"Function should have three void pointers as parameters: ",(0,r.kt)("inlineCode",{parentName:"li"},"void *dummy1,\nvoid *dummy2, void *dummy3")),(0,r.kt)("li",{parentName:"ul"},"Place the LED toggle function in a loop inside your your new function.\nThis works just like a ",(0,r.kt)("inlineCode",{parentName:"li"},"while")," loop in ",(0,r.kt)("inlineCode",{parentName:"li"},"main")," and needs to include a sleep\ncommand."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Define your thread just after your new function (replace ",(0,r.kt)("inlineCode",{parentName:"p"},"my_thread_handler"),"\nwith the name of your function):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c"},"K_THREAD_DEFINE(my_thread, 1024,\n                my_thread_handler, NULL, NULL, NULL,\n                K_LOWEST_APPLICATION_THREAD_PRIO, 0, 0);\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),", before the ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," loop begins, start your thread:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-c"},"k_thread_start(my_thread);\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Click to reveal the expected main.c file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:"excerpts from main.c",excerpts:!0,from:!0,"main.c":!0},"static void my_thread_handler(void *dummy1, void *dummy2, void *dummy3) {\n    while (1) {\n        gpio_pin_toggle_dt(&led);\n        k_sleep(K_SECONDS(1));\n    }\n}\n\nK_THREAD_DEFINE(my_thread, 1024,\n                my_thread_handler, NULL, NULL, NULL,\n                K_LOWEST_APPLICATION_THREAD_PRIO, 0, 0);\n\nvoid main(void)\n{\n    int ret;\n\n    if (!device_is_ready(led.port)) {\n        return;\n    }\n\n    ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);\n    if (ret < 0) {\n        return;\n    }\n\n    k_thread_start(my_thread);\n\n    while (1) {\n        k_sleep(K_SECONDS(1));\n    }\n}\n")),(0,r.kt)("p",null,"When defining the thread, we told Zephyr the name we want to assign to the\nthread, the number of bytes to use for the thread's stack, the function to run\nwhenever the thread is serviced, and the priority level.")),(0,r.kt)("h3",{id:"build-and-flash-the-threads-example"},"Build and flash the Threads example"),(0,r.kt)(i.ZP,{mdxType:"HowToFlash2"}),(0,r.kt)("h3",{id:"expected-outcome-1"},"Expected outcome"),(0,r.kt)("p",null,"Make sure the LED blinks as expected. Delving deeply into how these threads work\nis beyond the scope of this session. But an important lesson is that you\n",(0,r.kt)("strong",{parentName:"p"},"must")," call a kernel sleep function from the main loop. Without it, the main\nthread will never yield time for your thread to run. Equally important is that\nyour thread do something that yields back (usually a kernel sleep function) so\nthat the scheduler can take over once again."),(0,r.kt)("p",null,"For more information on Zephyr Threads, consult ",(0,r.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/latest/kernel/services/threads/index.html"},"the Threads\ndocumentation"),"."))}u.isMDXComponent=!0},8606:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/magtag-bootloader-mode-5c7952ae3bb40ddc89a40e0f41cf721f.jpg"}}]);