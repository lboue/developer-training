"use strict";(self.webpackChunkgolioth_developer_training=self.webpackChunkgolioth_developer_training||[]).push([[836],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),o=a(6010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(7462),o=a(7294),r=a(6010),i=a(2389),l=a(7392),s=a(7094),p=a(2466);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){var t;const{lazy:a,block:i,defaultValue:c,values:m,groupId:h,className:b}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,l.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===c?c:c??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??k[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:v}=(0,s.U)(),[N,T]=(0,o.useState)(y),_=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=h){const e=w[h];null!=e&&e!==N&&f.some((t=>t.value===e))&&T(e)}const O=e=>{const t=e.currentTarget,a=_.indexOf(t),n=f[a].value;n!==N&&(x(t),T(n),null!=h&&v(h,String(n)))},D=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=_.indexOf(e.currentTarget)+1;a=_[t]??_[0];break}case"ArrowLeft":{const t=_.indexOf(e.currentTarget)-1;a=_[t]??_[_.length-1];break}}null==(t=a)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},b)},f.map((e=>{let{value:t,label:a,attributes:i}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>_.push(e),onKeyDown:D,onFocus:O,onClick:O},i,{className:(0,r.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":N===t})}),a??t)}))),a?(0,o.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,i.Z)();return o.createElement(c,(0,n.Z)({key:String(t)},e))}},873:(e,t,a)=>{a.d(t,{ZP:()=>s});var n=a(7462),o=(a(7294),a(3905)),r=a(5488),i=a(5162);const l={toc:[]};function s(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,n.Z)({},l,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Use the USB cable to plug the MagTag into your local computer. Ensure the\npower switch is in the 'On' position.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Put the MagTag into DFU bootloader mode"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Hold down the Boot0 button")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Press and release the Reset button"),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("img",{alt:"MagTag Boot0 and Reset buttons",src:a(8606).Z,width:"1000",height:"643"})))))),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the flash command on your local machine:"),(0,o.kt)(r.Z,{groupId:"os",defaultValue:"linux",values:[{label:"Linux/MacOS",value:"linux"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"linux",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"cd ~/Downloads\nesptool.py --chip esp32s2 --port /dev/ttyACM0 write_flash 0x0 merged.bin\n"))),(0,o.kt)(i.Z,{value:"windows",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"cd %HOMEPATH%/Downloads\npython -m esptool --chip esp32s2 --port com3 write_flash 0x0 merged.bin\n")),(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The port for your MagTag may be different from the ",(0,o.kt)("inlineCode",{parentName:"p"},"com3")," shown above.\nFind this value in the Device Manager. Here's ",(0,o.kt)("a",{parentName:"p",href:"https://www.loom.com/share/cde8204ea8b341d892f6ad21ed43ac82"},"a video walkthrough of the\nprocess"),"."))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Press the MagTag ",(0,o.kt)("strong",{parentName:"p"},"Reset")," button to start the new firmware"))),(0,o.kt)("br",null),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If the flash is successful, ",(0,o.kt)("strong",{parentName:"p"},"you will receive an error message")," telling you that you must manually reset the device. Remember to press the reset button to run the newly flashed program. ",(0,o.kt)("a",{parentName:"p",href:"/docs/zephyr-intro/zephyr-tips#you-must-press-the-reset-button-after-flashing-firmware"},"Learn more about this"),"."),(0,o.kt)("p",{parentName:"admonition"},"On some machines you will only have a few seconds to run the ",(0,o.kt)("inlineCode",{parentName:"p"},"esptool.py")," command after entering bootloader mode. ",(0,o.kt)("a",{parentName:"p",href:"/docs/zephyr-intro/zephyr-tips#errors-with-west-build-zephyr-tree-and-esp32-environmental-variables"},"Learn more about this"),".")))}s.isMDXComponent=!0},1018:(e,t,a)=>{a.d(t,{ZP:()=>p});var n=a(7462),o=(a(7294),a(3905)),r=a(5488),i=a(5162),l=a(873);const s={toc:[]};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Put the MagTag into DFU bootloader mode (Hold Boot0, tap Reset)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Change to the download directory and run the flash command on your local machine:"),(0,o.kt)(r.Z,{groupId:"os",defaultValue:"linux",values:[{label:"Linux/MacOS",value:"linux"},{label:"Windows",value:"windows"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"linux",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"cd ~/Downloads\nesptool.py --chip esp32s2 --port /dev/ttyACM0 write_flash 0x0 merged.bin\n"))),(0,o.kt)(i.Z,{value:"windows",mdxType:"TabItem"},(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"cd %HOMEPATH%/Downloads\npython -m esptool --chip esp32s2 --port com3 write_flash 0x0 merged.bin\n"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Press the MagTag ",(0,o.kt)("strong",{parentName:"p"},"Reset")," button to start the new firmware"))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click to reveal full firmware update instructions"),(0,o.kt)(l.ZP,{mdxType:"VerbostDownloadFlash"})))}p.isMDXComponent=!0},8762:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var n=a(7462),o=(a(7294),a(3905)),r=a(1018);const i={sidebar_position:4,description:"Use interrupts to detect button pushes"},l="Add Button Input",s={unversionedId:"basic-io-exercises/button-input",id:"basic-io-exercises/button-input",title:"Add Button Input",description:"Use interrupts to detect button pushes",source:"@site/docs/basic-io-exercises/button-input.md",sourceDirName:"basic-io-exercises",slug:"/basic-io-exercises/button-input",permalink:"/docs/basic-io-exercises/button-input",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Use interrupts to detect button pushes"},sidebar:"tutorialSidebar",previous:{title:"Blinking an LED",permalink:"/docs/basic-io-exercises/mapping-gpio"},next:{title:"Try the RTOS",permalink:"/docs/basic-io-exercises/use-rtos"}},p={},u=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"Desired outcome(s)",id:"desired-outcomes",level:3},{value:"Time Estimate",id:"time-estimate",level:3},{value:"Workflow",id:"workflow",level:2},{value:"Copy the Zephyr Button example",id:"copy-the-zephyr-button-example",level:3},{value:"Exercise: Add <code>sw0</code> to your existing overlay file",id:"exercise-add-sw0-to-your-existing-overlay-file",level:3},{value:"Build and flash the example",id:"build-and-flash-the-example",level:3},{value:"Expected outcome",id:"expected-outcome",level:3},{value:"C code walkthrough",id:"c-code-walkthrough",level:2}],d={toc:u};function c(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"add-button-input"},"Add Button Input"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"MagTag Buttons on pins D11 and D12",src:a(9115).Z,width:"1000",height:"481"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"Make button D11 work!")))),(0,o.kt)("p",null,"The Zephyr button example demonstrates interrupt-based button input. But you\nneed to have a ",(0,o.kt)("inlineCode",{parentName:"p"},"sw0")," (switch zero) defined in the Devicetree to test it out.\nThis exercise will build upon our progress from blinking the LED"),(0,o.kt)("h2",{id:"learning-objectives"},"Learning Objectives"),(0,o.kt)("p",null,"We are learning about interrupts and how to map pins that trigger interrupts (in this case with a button press). This is an important part of any RTOS and a common element of custom hardware you will build."),(0,o.kt)("h3",{id:"desired-outcomes"},"Desired outcome(s)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Understand how to map an arbitrary pin input in the DeviceTree"),(0,o.kt)("li",{parentName:"ul"},"Understand how to work with interrupts in Zephyr")),(0,o.kt)("h3",{id:"time-estimate"},"Time Estimate"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"15 minutes")),(0,o.kt)("h2",{id:"workflow"},"Workflow"),(0,o.kt)("h3",{id:"copy-the-zephyr-button-example"},"Copy the Zephyr Button example"),(0,o.kt)("p",null,"Make a copy of the Zephyr Button example to work from"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd ~/Desktop/magtag-training/app\ncp -r ~/Desktop/magtag-training/deps/zephyr/samples/basic/button button-training\ncd button-training\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},"boards")," directory in your ",(0,o.kt)("inlineCode",{parentName:"li"},"button-training")," folder"),(0,o.kt)("li",{parentName:"ol"},"Copy the ",(0,o.kt)("inlineCode",{parentName:"li"},"esp32s2_saola.overlay")," from your LED example to the new ",(0,o.kt)("inlineCode",{parentName:"li"},"boards"),"\ndirectory")),(0,o.kt)("h3",{id:"exercise-add-sw0-to-your-existing-overlay-file"},"Exercise: Add ",(0,o.kt)("inlineCode",{parentName:"h3"},"sw0")," to your existing overlay file"),(0,o.kt)("p",null,"We can reuse the ",(0,o.kt)("inlineCode",{parentName:"p"},"led0")," configuration in the overlay file, but we need to add an\nalias and binding for ",(0,o.kt)("inlineCode",{parentName:"p"},"sw0")),(0,o.kt)("p",null,"Last time we used a DTS file from the WROVER kit as reference, but that board\ndoesn't have any buttons on it. What we're after is the basic structure of the\noverlay file, so it doesn't really matter what we use as a reference. This time,\nlet's use the Freedom K64 dev board DTS file as an example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Study ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/zephyrproject-rtos/zephyr/blob/main/boards/arm/frdm_k64f/frdm_k64f.dts"},"the DTS file for the frdm_k64f\nboard"),"\nand use the parts we need for our MagTag:"),(0,o.kt)("li",{parentName:"ul"},"open ",(0,o.kt)("inlineCode",{parentName:"li"},"~/Desktop/magtag-training/deps/zephyr/boards/arm/frdm_k64f/frdm_k64f.dts"))),(0,o.kt)("p",null,"Add the following to your overlay file:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"One new child node inside your root node: ",(0,o.kt)("inlineCode",{parentName:"li"},"gpio_keys")),(0,o.kt)("li",{parentName:"ul"},"The gpio_keys child node needs one subnode that declares the button"),(0,o.kt)("li",{parentName:"ul"},"The aliases child node needs a new subnode that associates the ",(0,o.kt)("inlineCode",{parentName:"li"},"sw0")," alias\nwith the new button subnode")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"center"},(0,o.kt)("img",{alt:"MagTag buttons have pull-up resistors",src:a(289).Z,width:"1000",height:"433"})))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"center"},"From ",(0,o.kt)("a",{parentName:"td",href:"https://learn.adafruit.com/assets/96946"},"the MagTag schematic"))))),(0,o.kt)("p",null,"You will need to update the pin assignment inside of your button subnode. There\nare gotchas to watch out for:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Pay close attention to the gpio port that is declared and notice that you\nneed to alter what was used with the Freedom K64f reference DTS file to match\nthe ESP32-style that we used when adding the LED to the overlay file."),(0,o.kt)("li",{parentName:"ol"},"The schematic shows pull-resistors but they are marked ",(0,o.kt)("inlineCode",{parentName:"li"},"DNP")," (Do Not\nPopulate). We will need to use the internal pull-up resistor of the ESP32s2.\nCan you figure out how to add the ",(0,o.kt)("inlineCode",{parentName:"li"},"GPIO_PULL_UP")," flag to this pin assignment?"),(0,o.kt)("li",{parentName:"ol"},"To clarify the pin naming/numbering: the MagTag has ",(0,o.kt)("inlineCode",{parentName:"li"},"D11")," printed next to the\nbutton because it is connected to GPIO11. On the schematic this is labelled\nas ",(0,o.kt)("inlineCode",{parentName:"li"},"BUTTOND"),".")),(0,o.kt)("p",null,"Once you have updated your overlay file, compare it with the example below."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click to reveal the expected esp32s2_saola.overlay file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"esp32s2_saola.overlay","esp32s2_saola.overlay":!0},'/ {\n    aliases {\n        led0 = &red_led;\n        sw0 = &user_button_d11;\n    };\n    leds {\n        compatible = "gpio-leds";\n        red_led: red_led {\n            gpios =  <&gpio0 13 GPIO_ACTIVE_HIGH>;\n            label = "Red - LED2";\n        };\n    };\n    gpio_keys {\n        compatible = "gpio-keys";\n        user_button_d11: button_0 {\n            label = "User D11";\n            gpios = <&gpio0 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;\n        };\n    };\n};\n')),(0,o.kt)("p",null,"Of note:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"compatible")," property tells Zephyr the type of binding we are using"),(0,o.kt)("li",{parentName:"ul"},"The Freedom board DTS file used ",(0,o.kt)("inlineCode",{parentName:"li"},"&gpioc")," but the ESP32s2 needed ",(0,o.kt)("inlineCode",{parentName:"li"},"&gpio0")),(0,o.kt)("li",{parentName:"ul"},"The pull-up resistor has been enabled using the OR operator to make a bitmask:\n",(0,o.kt)("inlineCode",{parentName:"li"},"(GPIO_ACTIVE_LOW | GPIO_PULL_UP)")))),(0,o.kt)("h3",{id:"build-and-flash-the-example"},"Build and flash the example"),(0,o.kt)(r.ZP,{mdxType:"HowToFlash"}),(0,o.kt)("h3",{id:"expected-outcome"},"Expected outcome"),(0,o.kt)("p",null,"The red led on the underside of the MagTag will illuminate when the button is\npressed and go out when it is released. This is done with polling, but if you\nare able to look at the serial output of the MagTag, the messages displayed\nthere are interrupt-driven."),(0,o.kt)("h2",{id:"c-code-walkthrough"},"C code walkthrough"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"#define SW0_NODE DT_ALIAS(sw0)\nstatic const struct gpio_dt_spec button = GPIO_DT_SPEC_GET_OR(SW0_NODE, gpios, {0});\nstatic struct gpio_callback button_cb_data;\ngpio_pin_configure_dt(&button, GPIO_INPUT);\ngpio_pin_interrupt_configure_dt(&button, GPIO_INT_EDGE_TO_ACTIVE);\ngpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));\ngpio_add_callback(button.port, &button_cb_data);\n")),(0,o.kt)("p",null,"Here is the button-related code the from ",(0,o.kt)("inlineCode",{parentName:"p"},"main.c")," file of the button example.\nLet's walk through what is happening:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A macro is used to look at the Devicetree and get the node information from\nthe ",(0,o.kt)("inlineCode",{parentName:"li"},"sw0")," alias"),(0,o.kt)("li",{parentName:"ol"},"Create a struct instance called ",(0,o.kt)("inlineCode",{parentName:"li"},"button")," that contains the relevant pin\ninformation for sw0"),(0,o.kt)("li",{parentName:"ol"},"Create a struct instance to pass information to the interrupt callback"),(0,o.kt)("li",{parentName:"ol"},"The pin is configured. This function automatically pulls in any flags\nspecified in the Devicetree"),(0,o.kt)("li",{parentName:"ol"},"The pin interrupt is configured"),(0,o.kt)("li",{parentName:"ol"},"The callback is initialized"),(0,o.kt)("li",{parentName:"ol"},"The callback is added")),(0,o.kt)("p",null,"Notice that the macros and functions used all contain ",(0,o.kt)("inlineCode",{parentName:"p"},"dt")," to indicate these\noperate on a Devicetree node. There are equivalent functions/macros that operate\ndirectly, but we recommend always using the Devicetree."),(0,o.kt)("p",null,"For more information on the Zephyr GPIO system, consult ",(0,o.kt)("a",{parentName:"p",href:"https://docs.zephyrproject.org/apidoc/latest/group__gpio__interface.html"},"the GPIO driver API\nreference"),"."))}c.isMDXComponent=!0},8606:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/magtag-bootloader-mode-5c7952ae3bb40ddc89a40e0f41cf721f.jpg"},9115:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/d11-d12-buttons-9c11f7e6ea1b454e155fe39dd1d10526.jpg"},289:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/magtag-button-pinout-765a7dbd75d28bc0a4ad030f15bfa86d.png"}}]);